package basestructure;

public class AVLTree<T extends Comparable<T>> {
	TreeNode<T> root;

	public AVLTree() {
		root = null;
	}

	public boolean insert(T element) {
		if (root == null) {
			root = new TreeNode<T>(element);
			return true;
		}
		return insert_(root, element);
	}

	public boolean insert_(TreeNode<T> node, T element) {

		return false;
	}

	public boolean remove(T element) {
		return remove_(root, element);
	}

	public boolean remove_(TreeNode<T> node, T element) {
		return false;
	}

	/**
	 * clear the tree
	 * @param node
	 * @return 
	 */
	public boolean clear(TreeNode<T> node) {
		if (node.left != null)
			clear(node.left);
		if (node.right != null)
			clear(node.right);
		node = null;
		return true;
	}

	/**
	 * calculate if the element is in the tree
	 * @param node
	 * @param element
	 * @return if element is in the tree,return true,else return false
	 */
	public boolean contains(T element) {
		return contains_(root, element);
	}

	/**
	 * the actual method called by contains
	 * @param node
	 * @param element
	 * @return
	 */
	private boolean contains_(TreeNode<T> node, T element) {
		int result = node.value.compareTo(element);
		if (result > 0 && node.left != null)
			return contains_(node.left, element);
		else if (result < 0 && node.right != null)
			return contains_(node.right, element);
		else if (result == 0 && node.mark != 0)
			return true;
		else
			return false;
	}

	// public AVLTree(AVLTree<T> tree) {
	// this.root = tree.root;
	// }

	// the node of the tree
	private static class TreeNode<T> {
		public T value;
		public TreeNode<T> left;
		public TreeNode<T> right;
		public int height;
		// mark the occured times of the value in the tree
		public int mark;

		public TreeNode(T value) {
			this(value, null, null);
		}

		public TreeNode(T value, TreeNode<T> left, TreeNode<T> right) {
			this.value = value;
			this.left = left;
			this.right = right;
		}
	}
}
